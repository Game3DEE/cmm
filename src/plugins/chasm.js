import { DataType, Plugin } from './plugin.js'

// earliest demo files: https://www.chasmaction.com/files/demos/1.02%201996-07-04/
// Map Editor instructions: https://steamcommunity.com/sharedfiles/filedetails/?id=2876780243

import { KaitaiStream } from 'kaitai-struct'
import C3O from '../kaitai/chasm_3o.js'
import CAR from '../kaitai/chasm_car.js'
import { saveTGA } from '../formats/tga.js'
import {
    AnimationClip,
    BufferGeometry,
    DataTexture,
    DoubleSide,
    Float32BufferAttribute,
    Mesh,
    MeshBasicMaterial,
    RepeatWrapping,
    RGBAFormat,
    UnsignedByteType,
} from 'three'
import {
    downloadBlob,
    setLinearFilters
} from '../utils.js'

const FIXED_ANIM_FPS = 18
const scale = 32


const ANIM_NAMES = [
    "move",         // 0
    "anim1",        // 1
    "idle1",        // 2
    "idle2",        // 3
    "idle3",        // 4
    "hit",          // 5
    "attackleft",   // 6
    "attackright",  // 7
    "attackhead",   // 8
    "pain1",        // 9
    "pain2",        // 10
    "righthandcut", // 11
    "lefthandcut",  // 12
    "headcut",      // 13
    "respawn",      // 14
    "win",          // 15
    "death1",       // 16
    "death2",       // 17
    "anim18",       // 18
    "anim19",       // 19
]

/*
sound IDs:
		Alarmed= 0u,
		RemoteAttack= 1u,
		MeleeAttack= 2u,
		Win= 3u,
		Pain= 4u,
		Death= 6u,
*/

export class ChasmPlugin extends Plugin {
    constructor(gui, camera) {
        super(gui, camera)

        this.guiOps = {
            exportTGA: () => {
                const tex = this.activeModel?.material?.map
                if (tex) {
                    const buf = saveTGA(tex.image) // no need for conversion, we are 32-bit
                    downloadBlob(buf, `${tex.name}.tga`)
                }
            },
        }
    }

    activate(model) {
        if (!this.customGui) {
            this.customGui = this.gui.addFolder('Chasm')
            this.customGui.add(this.guiOps, 'exportTGA').name('Export TGA')
        }
        this.activeModel = model
    }

    deactivate() {
        this.activeModel = null
        this.customGui?.destroy()
        this.customGui = null
    }

    async loadFile(url, ext, baseName) {
        switch(ext) {
            case '3o':
                return this.load3O(await this.loadFromURL(url), baseName)
            case 'ani':
                return this.activeModel ? this.loadANI(await this.loadFromURL(url), baseName) : [];
            case 'car':
                return this.loadCAR(await this.loadFromURL(url), baseName)
        }

        return undefined
    }

    loadANI(buffer, baseName) {
        const dv = new DataView(buffer);
        const origVertCount = dv.getUint16(0, true);
        let offset = 2;
        const frameCount = (buffer.byteLength - offset) / (origVertCount * 3 * 2);
    
        //console.log(this.activeModel.userData.mapping.length, origVertCount, frameCount);

        /*
        const { cpmData } = this.activeModel.userData
        // If animation doesn't match model, forget about it
        if (cpmData.vertices.length !== data.vertCount) {
            return null
        }*/

        const ensureUnique = true;
        if (ensureUnique) {
            // Make sure baseName is a unique animation name
            while( this.activeModel.animations?.find(anim => anim.name === baseName) )
                baseName += "_dup"
        }

        // !!! If there's no animations yet, create the empty array
        if (!this.activeModel.geometry.morphAttributes.position) {
            this.activeModel.geometry.morphAttributes.position = []
        }

        const { mapping } = this.activeModel.userData
        const cmmVertCount = this.activeModel.geometry.attributes.position.count
        const { position } = this.activeModel.geometry.morphAttributes
        const seq = []
        for (let i = 0; i < frameCount; i++) {
            const frame = []
            const frameOffset = offset + i * origVertCount * 3 * 2
            for (let j = 0; j < cmmVertCount; j++) {
                const index = frameOffset + (mapping[j] * 3 * 2);
                frame.push(
                    dv.getInt16(index +0, true) / scale,
                    dv.getInt16(index +4, true) / scale,
                    -dv.getInt16(index +2, true) / scale,
                )
            }
            const attr = new Float32BufferAttribute(frame, 3)
            attr.name = `${baseName}.${i}`
            position.push(attr)
            seq.push({
                name: attr.name,
                vertices: [],
            })
        }
        const clip = AnimationClip.CreateFromMorphTargetSequence(
            baseName,
            seq,
            12,
            false /*noLoop*/
        )
        //clip.userData = { fps: data.fps }

        return [
            { type: DataType.Animation, animation: clip },
        ];

    }

    load3O(buffer, baseName) {
        let parsed, version = 0

        try {
            parsed = new C3O(new KaitaiStream(buffer), undefined, undefined, 400) // released chasm 3O format
            version = 1
        } catch(e) {
            console.log(e)
            parsed = new C3O(new KaitaiStream(buffer), undefined, undefined, 300) // Chasm Demo Test v1.02 (Entering Shadow Zone)
        }
        console.log(`v${version}`, parsed)

        const texWidth = 64
        const texHeight = parsed.skinHeight

        const position = []
        const uvs = []
        //const index = []
        const mapping = [];

        function addTriangle(a,b,c, aUv, bUv, cUv, vOffset) {
            let v = parsed.vertices[a]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            v = parsed.vertices[b]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            v = parsed.vertices[c]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            mapping.push(a,b,c)
            uvs.push(
                aUv.x / texWidth, (aUv.y + vOffset) / texHeight,
                bUv.x / texWidth, (bUv.y + vOffset) / texHeight,
                cUv.x / texWidth, (cUv.y + vOffset) / texHeight)
            //index.push(a, b, c)
        }

        let tris = 0, quads = 0
        for (let i = 0; i < parsed.polyCount; i++) {
            const p = parsed.polygons[i]
            const a = p.indices[0], b = p.indices[1], c = p.indices[2], d = p.indices[3]
            const aUv = p.uvs[0], bUv = p.uvs[1], cUv = p.uvs[2], dUv = p.uvs[3]
            addTriangle(c, b, a, cUv, bUv, aUv, p.vOffset)
            if (d !== 0xff) {
                quads++
                addTriangle(a, d, c, aUv, dUv, cUv, p.vOffset)
                //addTriangle(a, c, d)
            } else {
                tris++
            }
        }
        console.log(`${tris} triangles, ${quads} quads`)

        const geo = new BufferGeometry()
        geo.setAttribute('position', new Float32BufferAttribute(position, 3))
        geo.setAttribute('uv', new Float32BufferAttribute(uvs, 2))
        //geo.setIndex(index)
        geo.computeVertexNormals()

        const texData = new Uint8ClampedArray(texHeight * texWidth * 4)
        const pal = version == 0 ? demoChasm2Pal : chasm2Pal
        for (let i = 0; i < texWidth * texHeight; i++) {
            const pix = parsed.skin[i]
            texData[i*4 +0] = pal[pix*3+0] << 2 // chasm2Pal colors have 6 bits
            texData[i*4 +1] = pal[pix*3+1] << 2
            texData[i*4 +2] = pal[pix*3+2] << 2
            texData[i*4 +3] = 0xff
        }
        const map = new DataTexture(texData, texWidth, texHeight, RGBAFormat, UnsignedByteType)
        setLinearFilters(map)
        map.name = baseName
        const mat = new MeshBasicMaterial({ side: DoubleSide, map })
        mat.name = baseName
        const mesh = new Mesh(geo, mat)
        mesh.name = baseName
        mesh.userData.mapping = mapping;

        return [
            { type: DataType.Texture, texture: map },
            { type: DataType.Model, model: mesh },
        ]
    }

    loadCAR(buffer, baseName) {
        const parsed = new CAR(new KaitaiStream(buffer))
        console.log(parsed)

        const texWidth = 64
        const texHeight = parsed.textureHeight //XXX: parsed.skinHeight

        const scale = 32

        const morphVertices = []
        const position = []
        const uvs = []
        //const index = []

        const totalFrames = parsed.animations.reduce((count, anim) => count + anim.frames.length, 0)
        if (totalFrames) {
            for (let i = 0; i < totalFrames; i++) {
                morphVertices[i] = []
            }
        }

        function addTriangle(a,b,c, aUv, bUv, cUv, vOffset) {
            let v = parsed.vertices[a]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            v = parsed.vertices[b]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            v = parsed.vertices[c]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            uvs.push(
                aUv.x / (texWidth * 256), (aUv.y + 4 * vOffset) / (texHeight * 256),
                bUv.x / (texWidth * 256), (bUv.y + 4 * vOffset) / (texHeight * 256),
                cUv.x / (texWidth * 256), (cUv.y + 4 * vOffset) / (texHeight * 256))

            let fIdx = 0
            parsed.animations.forEach(anim => {
                anim.frames.forEach(f => {
                    const vertices = f.vertices
                    let v = vertices[a]
                    morphVertices[fIdx].push(v.x / scale, v.z / scale, -v.y / scale)
                    v = vertices[b]
                    morphVertices[fIdx].push(v.x / scale, v.z / scale, -v.y / scale)
                    v = vertices[c]
                    morphVertices[fIdx].push(v.x / scale, v.z / scale, -v.y / scale)
                    ++fIdx
                })
            })
        }

        let tris = 0, quads = 0
        for (let i = 0; i < parsed.polyCount; i++) {
            const p = parsed.polygons[i]
            const a = p.indices[0], b = p.indices[1], c = p.indices[2], d = p.indices[3]
            const aUv = p.uvs[0], bUv = p.uvs[1], cUv = p.uvs[2], dUv = p.uvs[3]
            addTriangle(c, b, a, cUv, bUv, aUv, p.vOffset)
            if (d !== 0xff) {
                quads++
                addTriangle(a, d, c, aUv, dUv, cUv, p.vOffset)
            } else {
                tris++
            }
        }
        console.log(`${tris} triangles, ${quads} quads`)

        const geo = new BufferGeometry()
        geo.setAttribute('position', new Float32BufferAttribute(position, 3))
        geo.setAttribute('uv', new Float32BufferAttribute(uvs, 2))
        //geo.setIndex(index)
        geo.computeVertexNormals()

        if (totalFrames) {
            // Add animation data
            geo.morphAttributes.position = []
            let frIdx = 0
            parsed.animations.forEach((ani, aidx) => {
                for (let i = 0; i < ani.frames.length; i++) {
                    const attr = new Float32BufferAttribute(morphVertices[frIdx + i], 3)
                    attr.name = `${ANIM_NAMES[aidx]}.${i}`
                    geo.morphAttributes.position.push(attr)
                }
                frIdx += ani.frames.length
            })
        }

        const texData = new Uint8ClampedArray(texHeight * texWidth * 4)
        for (let i = 0; i < texWidth * texHeight; i++) {
            const pix = parsed.texture[i] //XXX: skin
            texData[i*4 +0] = chasm2Pal[pix*3+0] << 2 // chasm2Pal colors have 6 bits
            texData[i*4 +1] = chasm2Pal[pix*3+1] << 2
            texData[i*4 +2] = chasm2Pal[pix*3+2] << 2
            texData[i*4 +3] = 0xff
        }
        const map = new DataTexture(texData, texWidth, texHeight, RGBAFormat, UnsignedByteType)
        setLinearFilters(map)
        map.name = baseName
        map.wrapS = map.wrapT = RepeatWrapping
        const mat = new MeshBasicMaterial({ side: DoubleSide, map })
        mat.name = baseName
        const mesh = new Mesh(geo, mat)
        mesh.name = baseName

        if (totalFrames) {
            let cmmAnimIdx = 0
            parsed.animations.forEach((ani, aidx) => {
                if (ani.frames.length == 0) return

                const seq = []
                for (let i = 0; i < ani.frames.length; i++) {
                    seq.push({
                        name: `${ANIM_NAMES[aidx]}.${i}`,
                        vertices: [], // seems unused
                    })
                }
                const clip = AnimationClip.CreateFromMorphTargetSequence(
                    `${ANIM_NAMES[aidx]}`,
                    seq,
                    FIXED_ANIM_FPS,
                    false /*noLoop*/
                )
/*
                console.log(cmmAnimIdx, parsed.soundSizes[cmmAnimIdx])
                if (cmmAnimIdx < parsed.soundSizes.length && parsed.soundSizes[cmmAnimIdx]) {
                    // We have a sound...
                    console.log(`Resampling audio ${cmmAnimIdx}`)
                    const buffer = new ArrayBuffer(parsed.soundSizes[cmmAnimIdx] * 4)
                    const view = new DataView(buffer)
                    const src = parsed.sounds[cmmAnimIdx]
                    for (let i = 0; i < src.length; i++) {
                        const val = Math.floor(src[i] * 256)
                        view.setUint16(i * 4 + 0, val, true)
                        view.setUint16(i * 4 + 2, val, true) // XXX find a better upsampling method :P
                    }
                    clip.audio = {
                        name: `snd${cmmAnimIdx}`,
                        pcm: new Uint8ClampedArray(buffer),
                    }
                }*/
                clip.userData = { fps: FIXED_ANIM_FPS }
                mesh.animations.push(clip)
                ++cmmAnimIdx
            })
        }

        return [
            { type: DataType.Texture, texture: map },
            { type: DataType.Model, model: mesh },
        ]
    }

    supportedExtensions() {
        return [ '3o', 'ani', 'car' ]
    }

    isMode() {
        return true
    }

    name() {
        return "Chasm: The Rift (Model)"
    }
}

const chasm2Pal = [ // ripped from chasm2.pal of release version
    0x01, 0x01, 0x01, 0x04, 0x04, 0x04, 0x07, 0x07, 0x07, 0x09, 0x09, 0x09, 0x0c, 0x0c, 0x0c, 0x0f,
    0x0f, 0x0f, 0x11, 0x11, 0x11, 0x14, 0x14, 0x14, 0x17, 0x17, 0x17, 0x19, 0x19, 0x19, 0x1c, 0x1c,
    0x1c, 0x1f, 0x1f, 0x1f, 0x21, 0x21, 0x21, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a,
    0x2c, 0x2c, 0x2c, 0x2f, 0x2f, 0x2f, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x3a,
    0x3a, 0x3a, 0x3c, 0x3c, 0x3c, 0x3f, 0x3f, 0x3f, 0x04, 0x05, 0x04, 0x06, 0x06, 0x06, 0x04, 0x05,
    0x05, 0x06, 0x06, 0x06, 0x02, 0x02, 0x02, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x07, 0x06, 0x06,
    0x06, 0x05, 0x03, 0x09, 0x07, 0x04, 0x0c, 0x09, 0x06, 0x0f, 0x0b, 0x07, 0x12, 0x0d, 0x08, 0x15,
    0x0f, 0x0a, 0x18, 0x11, 0x0b, 0x1b, 0x14, 0x0d, 0x1e, 0x16, 0x0e, 0x21, 0x18, 0x10, 0x24, 0x1a,
    0x11, 0x27, 0x1c, 0x13, 0x2a, 0x1e, 0x14, 0x2d, 0x20, 0x16, 0x30, 0x22, 0x17, 0x33, 0x25, 0x19,
    0x35, 0x26, 0x1a, 0x36, 0x26, 0x1b, 0x38, 0x28, 0x1d, 0x39, 0x2a, 0x1f, 0x3b, 0x2c, 0x21, 0x3c,
    0x2d, 0x23, 0x3e, 0x2f, 0x25, 0x3f, 0x31, 0x26, 0x08, 0x01, 0x01, 0x0b, 0x01, 0x01, 0x0f, 0x01,
    0x01, 0x14, 0x01, 0x01, 0x19, 0x02, 0x02, 0x1c, 0x03, 0x03, 0x1f, 0x03, 0x03, 0x22, 0x04, 0x04,
    0x07, 0x08, 0x07, 0x08, 0x09, 0x08, 0x0a, 0x0b, 0x0a, 0x0b, 0x0d, 0x0b, 0x0c, 0x0f, 0x0d, 0x0e,
    0x10, 0x0e, 0x0f, 0x12, 0x0f, 0x10, 0x14, 0x11, 0x12, 0x15, 0x12, 0x13, 0x17, 0x13, 0x14, 0x19,
    0x15, 0x15, 0x1b, 0x16, 0x16, 0x1d, 0x18, 0x18, 0x1f, 0x19, 0x19, 0x21, 0x1a, 0x1a, 0x23, 0x1c,
    0x07, 0x06, 0x06, 0x09, 0x08, 0x07, 0x0c, 0x0a, 0x08, 0x0e, 0x0b, 0x09, 0x10, 0x0d, 0x0a, 0x12,
    0x0e, 0x0c, 0x14, 0x10, 0x0d, 0x16, 0x12, 0x0e, 0x18, 0x13, 0x0f, 0x1a, 0x15, 0x10, 0x1c, 0x17,
    0x12, 0x1e, 0x18, 0x13, 0x20, 0x1a, 0x14, 0x22, 0x1b, 0x15, 0x25, 0x1d, 0x16, 0x27, 0x1f, 0x18,
    0x05, 0x05, 0x03, 0x07, 0x07, 0x05, 0x09, 0x08, 0x06, 0x0b, 0x0a, 0x07, 0x0d, 0x0c, 0x09, 0x0f,
    0x0e, 0x0a, 0x11, 0x10, 0x0b, 0x13, 0x12, 0x0d, 0x14, 0x14, 0x0e, 0x16, 0x16, 0x10, 0x18, 0x18,
    0x11, 0x1a, 0x1a, 0x12, 0x1c, 0x1c, 0x14, 0x1e, 0x1e, 0x15, 0x20, 0x1f, 0x16, 0x22, 0x21, 0x18,
    0x05, 0x05, 0x03, 0x08, 0x07, 0x05, 0x0b, 0x0a, 0x08, 0x0d, 0x0c, 0x0a, 0x10, 0x0f, 0x0c, 0x13,
    0x12, 0x0e, 0x16, 0x14, 0x10, 0x19, 0x17, 0x13, 0x1d, 0x1a, 0x16, 0x21, 0x1d, 0x19, 0x25, 0x21,
    0x1b, 0x28, 0x24, 0x1e, 0x2c, 0x28, 0x21, 0x30, 0x2b, 0x24, 0x34, 0x2e, 0x27, 0x38, 0x32, 0x2a,
    0x07, 0x07, 0x07, 0x09, 0x09, 0x09, 0x0a, 0x0b, 0x0b, 0x0b, 0x0d, 0x0d, 0x0d, 0x0f, 0x0f, 0x0e,
    0x10, 0x10, 0x10, 0x12, 0x12, 0x11, 0x14, 0x14, 0x12, 0x16, 0x16, 0x13, 0x18, 0x18, 0x15, 0x1a,
    0x1a, 0x16, 0x1c, 0x1c, 0x17, 0x1e, 0x1f, 0x18, 0x20, 0x21, 0x19, 0x22, 0x23, 0x1a, 0x25, 0x25,
    0x03, 0x05, 0x03, 0x04, 0x06, 0x04, 0x06, 0x09, 0x06, 0x08, 0x0b, 0x07, 0x0a, 0x0d, 0x09, 0x0b,
    0x0f, 0x0b, 0x0d, 0x11, 0x0c, 0x0e, 0x12, 0x0d, 0x0f, 0x14, 0x0e, 0x11, 0x16, 0x0f, 0x12, 0x17,
    0x11, 0x13, 0x19, 0x12, 0x15, 0x1b, 0x13, 0x16, 0x1c, 0x14, 0x17, 0x1e, 0x15, 0x19, 0x20, 0x17,
    0x25, 0x05, 0x05, 0x28, 0x05, 0x05, 0x2b, 0x06, 0x06, 0x2e, 0x06, 0x06, 0x17, 0x01, 0x01, 0x19,
    0x02, 0x02, 0x1a, 0x04, 0x04, 0x1c, 0x06, 0x06, 0x1e, 0x07, 0x07, 0x20, 0x09, 0x09, 0x22, 0x0b,
    0x0b, 0x24, 0x0c, 0x0c, 0x26, 0x0e, 0x0e, 0x28, 0x0f, 0x0f, 0x2a, 0x11, 0x11, 0x2c, 0x13, 0x13,
    0x23, 0x0f, 0x03, 0x27, 0x13, 0x04, 0x2a, 0x17, 0x06, 0x2e, 0x1b, 0x08, 0x31, 0x1f, 0x09, 0x35,
    0x23, 0x0b, 0x39, 0x27, 0x0c, 0x3c, 0x2b, 0x0e, 0x3d, 0x2e, 0x13, 0x3d, 0x31, 0x18, 0x3e, 0x34,
    0x1d, 0x3f, 0x37, 0x22, 0x3f, 0x39, 0x26, 0x3f, 0x3b, 0x2a, 0x3f, 0x3d, 0x2e, 0x3f, 0x3f, 0x32,
    0x05, 0x05, 0x03, 0x08, 0x07, 0x04, 0x0a, 0x09, 0x05, 0x0c, 0x0b, 0x06, 0x0e, 0x0c, 0x07, 0x10,
    0x0e, 0x08, 0x13, 0x10, 0x09, 0x15, 0x12, 0x0a, 0x17, 0x14, 0x0b, 0x19, 0x16, 0x0c, 0x1c, 0x18,
    0x0d, 0x1e, 0x1a, 0x0f, 0x20, 0x1b, 0x10, 0x22, 0x1d, 0x11, 0x24, 0x1f, 0x12, 0x27, 0x21, 0x13,
    0x06, 0x05, 0x02, 0x08, 0x06, 0x03, 0x0b, 0x08, 0x04, 0x0d, 0x09, 0x04, 0x0f, 0x0a, 0x05, 0x11,
    0x0c, 0x06, 0x14, 0x0d, 0x07, 0x16, 0x0e, 0x08, 0x18, 0x10, 0x09, 0x1b, 0x11, 0x0a, 0x1d, 0x13,
    0x0a, 0x1f, 0x14, 0x0b, 0x21, 0x15, 0x0c, 0x24, 0x17, 0x0d, 0x26, 0x18, 0x0e, 0x28, 0x19, 0x0f,
    0x02, 0x02, 0x05, 0x04, 0x04, 0x07, 0x06, 0x06, 0x0a, 0x08, 0x08, 0x0c, 0x0a, 0x0a, 0x0e, 0x0c,
    0x0c, 0x11, 0x0e, 0x0e, 0x13, 0x10, 0x10, 0x15, 0x12, 0x12, 0x17, 0x15, 0x15, 0x1a, 0x17, 0x17,
    0x1c, 0x19, 0x19, 0x1e, 0x1b, 0x1b, 0x20, 0x1d, 0x1d, 0x22, 0x20, 0x20, 0x25, 0x22, 0x22, 0x27,
    0x12, 0x14, 0x0d, 0x0e, 0x11, 0x08, 0x0a, 0x0d, 0x04, 0x15, 0x15, 0x0f, 0x17, 0x17, 0x11, 0x10,
    0x10, 0x0c, 0x0a, 0x13, 0x08, 0x11, 0x1b, 0x0f, 0x18, 0x24, 0x16, 0x1f, 0x2c, 0x1d, 0x26, 0x35,
    0x24, 0x2d, 0x3e, 0x2b, 0x18, 0x08, 0x02, 0x1f, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

const demoChasm2Pal = [
    0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x05, 0x05, 0x05, 0x07, 0x07, 0x07, 0x09, 0x09, 0x09, 0x0b,
    0x0b, 0x0b, 0x0d, 0x0d, 0x0d, 0x0f, 0x0f, 0x0f, 0x11, 0x11, 0x11, 0x13, 0x13, 0x13, 0x15, 0x15,
    0x15, 0x17, 0x17, 0x17, 0x19, 0x19, 0x19, 0x1b, 0x1b, 0x1b, 0x1d, 0x1d, 0x1d, 0x1f, 0x1f, 0x1f,
    0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2b,
    0x2b, 0x2b, 0x2d, 0x2d, 0x2d, 0x2f, 0x2f, 0x2f, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35,
    0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3b, 0x3b, 0x3b, 0x3d, 0x3d, 0x3d, 0x3f, 0x3f, 0x3f,
    0x0b, 0x09, 0x05, 0x0e, 0x0b, 0x07, 0x11, 0x0d, 0x08, 0x14, 0x0f, 0x09, 0x17, 0x11, 0x0b, 0x1a,
    0x13, 0x0c, 0x1d, 0x15, 0x0e, 0x20, 0x17, 0x0f, 0x23, 0x19, 0x10, 0x26, 0x1b, 0x12, 0x29, 0x1d,
    0x13, 0x2c, 0x1f, 0x15, 0x2d, 0x21, 0x16, 0x2f, 0x22, 0x17, 0x31, 0x23, 0x18, 0x33, 0x25, 0x19,
    0x35, 0x26, 0x1a, 0x36, 0x26, 0x1b, 0x38, 0x28, 0x1d, 0x39, 0x2a, 0x1f, 0x3b, 0x2c, 0x21, 0x3c,
    0x2d, 0x23, 0x3e, 0x2f, 0x25, 0x3f, 0x31, 0x26, 0x3f, 0x32, 0x2a, 0x3f, 0x33, 0x2c, 0x3f, 0x35,
    0x2e, 0x3f, 0x36, 0x31, 0x3f, 0x37, 0x32, 0x3f, 0x39, 0x35, 0x3f, 0x3a, 0x37, 0x3f, 0x3c, 0x39,
    0x07, 0x08, 0x07, 0x08, 0x09, 0x08, 0x0a, 0x0b, 0x0a, 0x0b, 0x0d, 0x0b, 0x0c, 0x0f, 0x0d, 0x0e,
    0x10, 0x0e, 0x0f, 0x12, 0x0f, 0x10, 0x14, 0x11, 0x12, 0x15, 0x12, 0x13, 0x17, 0x13, 0x14, 0x19,
    0x15, 0x15, 0x1b, 0x16, 0x16, 0x1d, 0x18, 0x18, 0x1f, 0x19, 0x19, 0x21, 0x1a, 0x1a, 0x23, 0x1c,
    0x07, 0x06, 0x06, 0x09, 0x08, 0x07, 0x0c, 0x0a, 0x08, 0x0e, 0x0b, 0x09, 0x10, 0x0d, 0x0a, 0x12,
    0x0e, 0x0c, 0x14, 0x10, 0x0d, 0x16, 0x12, 0x0e, 0x18, 0x13, 0x0f, 0x1a, 0x15, 0x10, 0x1c, 0x17,
    0x12, 0x1e, 0x18, 0x13, 0x20, 0x1a, 0x14, 0x22, 0x1b, 0x15, 0x25, 0x1d, 0x16, 0x27, 0x1f, 0x18,
    0x06, 0x0a, 0x04, 0x09, 0x0e, 0x06, 0x0a, 0x13, 0x08, 0x0d, 0x17, 0x0a, 0x0f, 0x1b, 0x0c, 0x12,
    0x1f, 0x0e, 0x14, 0x23, 0x11, 0x16, 0x26, 0x12, 0x17, 0x2a, 0x14, 0x19, 0x2c, 0x16, 0x1b, 0x30,
    0x18, 0x1d, 0x33, 0x1a, 0x1e, 0x36, 0x1c, 0x20, 0x39, 0x1e, 0x25, 0x3d, 0x23, 0x2d, 0x3e, 0x2b,
    0x00, 0x01, 0x18, 0x00, 0x01, 0x1d, 0x00, 0x01, 0x22, 0x01, 0x02, 0x27, 0x03, 0x04, 0x2e, 0x08,
    0x0a, 0x32, 0x0e, 0x0f, 0x37, 0x14, 0x14, 0x3f, 0x14, 0x1b, 0x3f, 0x14, 0x22, 0x3f, 0x14, 0x29,
    0x3f, 0x14, 0x31, 0x3f, 0x13, 0x38, 0x3f, 0x13, 0x3c, 0x3f, 0x13, 0x3f, 0x3f, 0x28, 0x3f, 0x3f,
    0x07, 0x07, 0x07, 0x09, 0x09, 0x09, 0x0a, 0x0b, 0x0b, 0x0b, 0x0d, 0x0d, 0x0d, 0x0f, 0x0f, 0x0e,
    0x10, 0x10, 0x10, 0x12, 0x12, 0x11, 0x14, 0x14, 0x12, 0x16, 0x16, 0x13, 0x18, 0x18, 0x15, 0x1a,
    0x1a, 0x16, 0x1c, 0x1c, 0x17, 0x1e, 0x1f, 0x18, 0x20, 0x21, 0x19, 0x22, 0x23, 0x1a, 0x25, 0x25,
    0x05, 0x07, 0x05, 0x06, 0x08, 0x06, 0x07, 0x0a, 0x07, 0x09, 0x0c, 0x08, 0x0a, 0x0d, 0x09, 0x0b,
    0x0f, 0x0b, 0x0d, 0x11, 0x0c, 0x0e, 0x12, 0x0d, 0x0f, 0x14, 0x0e, 0x11, 0x16, 0x0f, 0x12, 0x17,
    0x11, 0x13, 0x19, 0x12, 0x15, 0x1b, 0x13, 0x16, 0x1c, 0x14, 0x17, 0x1e, 0x15, 0x19, 0x20, 0x17,
    0x0f, 0x01, 0x01, 0x14, 0x01, 0x01, 0x19, 0x02, 0x02, 0x1c, 0x03, 0x03, 0x1f, 0x03, 0x03, 0x22,
    0x04, 0x04, 0x25, 0x05, 0x05, 0x28, 0x05, 0x05, 0x2b, 0x06, 0x06, 0x2e, 0x06, 0x06, 0x31, 0x07,
    0x07, 0x34, 0x08, 0x08, 0x35, 0x0e, 0x0e, 0x37, 0x15, 0x15, 0x38, 0x1c, 0x1c, 0x39, 0x23, 0x23,
    0x3b, 0x2a, 0x2a, 0x3c, 0x31, 0x31, 0x3d, 0x38, 0x38, 0x3f, 0x3f, 0x3f, 0x17, 0x01, 0x01, 0x19,
    0x02, 0x02, 0x1a, 0x04, 0x04, 0x1c, 0x06, 0x06, 0x1e, 0x07, 0x07, 0x20, 0x09, 0x09, 0x22, 0x0b,
    0x0b, 0x24, 0x0c, 0x0c, 0x26, 0x0e, 0x0e, 0x28, 0x0f, 0x0f, 0x2a, 0x11, 0x11, 0x2c, 0x13, 0x13,
    0x23, 0x11, 0x01, 0x27, 0x17, 0x04, 0x2c, 0x1d, 0x09, 0x30, 0x25, 0x0d, 0x34, 0x2c, 0x12, 0x38,
    0x32, 0x17, 0x3c, 0x39, 0x1c, 0x3f, 0x3f, 0x23, 0x12, 0x14, 0x0d, 0x0e, 0x11, 0x08, 0x0a, 0x0d,
    0x04, 0x1d, 0x1f, 0x18, 0x1b, 0x1c, 0x15, 0x18, 0x1a, 0x13, 0x00, 0x01, 0x0d, 0x00, 0x01, 0x12,
    0x3f, 0x3f, 0x32, 0x3f, 0x3d, 0x2e, 0x3f, 0x3b, 0x2a, 0x3f, 0x39, 0x26, 0x3f, 0x37, 0x22, 0x3f,
    0x35, 0x1e, 0x3f, 0x33, 0x1b, 0x3f, 0x31, 0x17, 0x3f, 0x2f, 0x13, 0x3f, 0x2d, 0x0f, 0x3f, 0x2b,
    0x0b, 0x3f, 0x29, 0x07, 0x3f, 0x27, 0x03, 0x3e, 0x25, 0x01, 0x3b, 0x24, 0x02, 0x3b, 0x22, 0x00,
    0x38, 0x1f, 0x00, 0x34, 0x1c, 0x00, 0x31, 0x19, 0x00, 0x2d, 0x16, 0x00, 0x2a, 0x13, 0x00, 0x26,
    0x11, 0x01, 0x23, 0x0e, 0x01, 0x1f, 0x0b, 0x01, 0x38, 0x1b, 0x03, 0x32, 0x18, 0x07, 0x2b, 0x15,
    0x09, 0x25, 0x12, 0x0b, 0x0d, 0x0a, 0x06, 0x0a, 0x08, 0x04, 0x10, 0x10, 0x0c, 0x12, 0x12, 0x0d,
    0x15, 0x15, 0x0f, 0x17, 0x17, 0x11, 0x19, 0x19, 0x12, 0x1b, 0x1b, 0x14, 0x1e, 0x1e, 0x15, 0x20,
    0x20, 0x17, 0x22, 0x22, 0x19, 0x24, 0x24, 0x1a, 0x26, 0x26, 0x1c, 0x28, 0x28, 0x1e, 0x2b, 0x2b,
    0x1f, 0x2f, 0x2f, 0x21, 0x32, 0x32, 0x24, 0x34, 0x34, 0x26, 0x36, 0x36, 0x28, 0x01, 0x01, 0x01,
]