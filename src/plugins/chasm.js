// SCCS' Prism3D engine support
import { DataType, Plugin } from './plugin.js'

import { KaitaiStream } from 'kaitai-struct'
import C3O from '../kaitai/chasm_3o.js'

import {
    AnimationClip,
    BufferGeometry,
    DataTexture,
    DoubleSide,
    Float32BufferAttribute,
    Mesh,
    MeshNormalMaterial,
    MeshBasicMaterial,
    RGBAFormat,
    UnsignedByteType,
} from 'three'


export class ChasmPlugin extends Plugin {
    async loadFile(url, ext, baseName) {
        switch(ext) {
            case '3o':
                return this.load3O(await this.loadFromURL(url), baseName)
        }

        return undefined
    }

    load3O(buffer, baseName) {
        const parsed = new C3O(new KaitaiStream(buffer))
        console.log(parsed)

        const texWidth = 64
        const texHeight = parsed.skinHeight

        const scale = 32

        const position = []
        const uvs = []
        //const index = []

        function addTriangle(a,b,c, aUv, bUv, cUv, vOffset) {
            let v = parsed.vertices[a]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            v = parsed.vertices[b]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            v = parsed.vertices[c]
            position.push(v.x / scale, v.z / scale, -v.y / scale)
            uvs.push(
                aUv.x / texWidth, (aUv.y + vOffset) / texHeight,
                bUv.x / texWidth, (bUv.y + vOffset) / texHeight,
                cUv.x / texWidth, (cUv.y + vOffset) / texHeight)
            //index.push(a, b, c)
        }

        let tris = 0, quads = 0
        for (let i = 0; i < parsed.polyCount; i++) {
            const p = parsed.polygons[i]
            const a = p.indices[0], b = p.indices[1], c = p.indices[2], d = p.indices[3]
            const aUv = p.uvs[0], bUv = p.uvs[1], cUv = p.uvs[2], dUv = p.uvs[3]
            addTriangle(a, b, c, aUv, bUv, cUv, p.vOffset)
            if (d !== 0xff) {
                quads++
                addTriangle(c, d, a, cUv, dUv, aUv, p.vOffset)
                //addTriangle(a, c, d)
            } else {
                tris++
            }
        }
        console.log(`${tris} triangles, ${quads} quads`)

        const geo = new BufferGeometry()
        geo.setAttribute('position', new Float32BufferAttribute(position, 3))
        geo.setAttribute('uv', new Float32BufferAttribute(uvs, 2))
        //geo.setIndex(index)
        geo.computeVertexNormals()

        const texData = new Uint8ClampedArray(texHeight * texWidth * 4)
        for (let i = 0; i < texWidth * texHeight; i++) {
            const pix = parsed.skin[i]
            texData[i*4 +0] = chasm2Pal[pix*3+0] << 2 // chasm2Pal colors have 6 bits
            texData[i*4 +1] = chasm2Pal[pix*3+1] << 2
            texData[i*4 +2] = chasm2Pal[pix*3+2] << 2
            texData[i*4 +3] = 0xff
        }
        const map = new DataTexture(texData, texWidth, texHeight, RGBAFormat, UnsignedByteType)
        map.name = baseName
        const mat = new MeshBasicMaterial({ side: DoubleSide, map })
        mat.name = baseName
        const mesh = new Mesh(geo, mat)
        mesh.name = baseName

        return [
            { type: DataType.Texture, texture: map },
            { type: DataType.Model, model: mesh },
        ]
    }

    supportedExtensions() {
        return [ '3o' ]
    }

    isMode() {
        return true
    }

    name() {
        return "Chasm: The Rift (Model)"
    }
}

const chasm2Pal = [
    0x01, 0x01, 0x01, 0x04, 0x04, 0x04, 0x07, 0x07, 0x07, 0x09, 0x09, 0x09, 0x0c, 0x0c, 0x0c, 0x0f,
    0x0f, 0x0f, 0x11, 0x11, 0x11, 0x14, 0x14, 0x14, 0x17, 0x17, 0x17, 0x19, 0x19, 0x19, 0x1c, 0x1c,
    0x1c, 0x1f, 0x1f, 0x1f, 0x21, 0x21, 0x21, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a,
    0x2c, 0x2c, 0x2c, 0x2f, 0x2f, 0x2f, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x3a,
    0x3a, 0x3a, 0x3c, 0x3c, 0x3c, 0x3f, 0x3f, 0x3f, 0x04, 0x05, 0x04, 0x06, 0x06, 0x06, 0x04, 0x05,
    0x05, 0x06, 0x06, 0x06, 0x02, 0x02, 0x02, 0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x07, 0x06, 0x06,
    0x06, 0x05, 0x03, 0x09, 0x07, 0x04, 0x0c, 0x09, 0x06, 0x0f, 0x0b, 0x07, 0x12, 0x0d, 0x08, 0x15,
    0x0f, 0x0a, 0x18, 0x11, 0x0b, 0x1b, 0x14, 0x0d, 0x1e, 0x16, 0x0e, 0x21, 0x18, 0x10, 0x24, 0x1a,
    0x11, 0x27, 0x1c, 0x13, 0x2a, 0x1e, 0x14, 0x2d, 0x20, 0x16, 0x30, 0x22, 0x17, 0x33, 0x25, 0x19,
    0x35, 0x26, 0x1a, 0x36, 0x26, 0x1b, 0x38, 0x28, 0x1d, 0x39, 0x2a, 0x1f, 0x3b, 0x2c, 0x21, 0x3c,
    0x2d, 0x23, 0x3e, 0x2f, 0x25, 0x3f, 0x31, 0x26, 0x08, 0x01, 0x01, 0x0b, 0x01, 0x01, 0x0f, 0x01,
    0x01, 0x14, 0x01, 0x01, 0x19, 0x02, 0x02, 0x1c, 0x03, 0x03, 0x1f, 0x03, 0x03, 0x22, 0x04, 0x04,
    0x07, 0x08, 0x07, 0x08, 0x09, 0x08, 0x0a, 0x0b, 0x0a, 0x0b, 0x0d, 0x0b, 0x0c, 0x0f, 0x0d, 0x0e,
    0x10, 0x0e, 0x0f, 0x12, 0x0f, 0x10, 0x14, 0x11, 0x12, 0x15, 0x12, 0x13, 0x17, 0x13, 0x14, 0x19,
    0x15, 0x15, 0x1b, 0x16, 0x16, 0x1d, 0x18, 0x18, 0x1f, 0x19, 0x19, 0x21, 0x1a, 0x1a, 0x23, 0x1c,
    0x07, 0x06, 0x06, 0x09, 0x08, 0x07, 0x0c, 0x0a, 0x08, 0x0e, 0x0b, 0x09, 0x10, 0x0d, 0x0a, 0x12,
    0x0e, 0x0c, 0x14, 0x10, 0x0d, 0x16, 0x12, 0x0e, 0x18, 0x13, 0x0f, 0x1a, 0x15, 0x10, 0x1c, 0x17,
    0x12, 0x1e, 0x18, 0x13, 0x20, 0x1a, 0x14, 0x22, 0x1b, 0x15, 0x25, 0x1d, 0x16, 0x27, 0x1f, 0x18,
    0x05, 0x05, 0x03, 0x07, 0x07, 0x05, 0x09, 0x08, 0x06, 0x0b, 0x0a, 0x07, 0x0d, 0x0c, 0x09, 0x0f,
    0x0e, 0x0a, 0x11, 0x10, 0x0b, 0x13, 0x12, 0x0d, 0x14, 0x14, 0x0e, 0x16, 0x16, 0x10, 0x18, 0x18,
    0x11, 0x1a, 0x1a, 0x12, 0x1c, 0x1c, 0x14, 0x1e, 0x1e, 0x15, 0x20, 0x1f, 0x16, 0x22, 0x21, 0x18,
    0x05, 0x05, 0x03, 0x08, 0x07, 0x05, 0x0b, 0x0a, 0x08, 0x0d, 0x0c, 0x0a, 0x10, 0x0f, 0x0c, 0x13,
    0x12, 0x0e, 0x16, 0x14, 0x10, 0x19, 0x17, 0x13, 0x1d, 0x1a, 0x16, 0x21, 0x1d, 0x19, 0x25, 0x21,
    0x1b, 0x28, 0x24, 0x1e, 0x2c, 0x28, 0x21, 0x30, 0x2b, 0x24, 0x34, 0x2e, 0x27, 0x38, 0x32, 0x2a,
    0x07, 0x07, 0x07, 0x09, 0x09, 0x09, 0x0a, 0x0b, 0x0b, 0x0b, 0x0d, 0x0d, 0x0d, 0x0f, 0x0f, 0x0e,
    0x10, 0x10, 0x10, 0x12, 0x12, 0x11, 0x14, 0x14, 0x12, 0x16, 0x16, 0x13, 0x18, 0x18, 0x15, 0x1a,
    0x1a, 0x16, 0x1c, 0x1c, 0x17, 0x1e, 0x1f, 0x18, 0x20, 0x21, 0x19, 0x22, 0x23, 0x1a, 0x25, 0x25,
    0x03, 0x05, 0x03, 0x04, 0x06, 0x04, 0x06, 0x09, 0x06, 0x08, 0x0b, 0x07, 0x0a, 0x0d, 0x09, 0x0b,
    0x0f, 0x0b, 0x0d, 0x11, 0x0c, 0x0e, 0x12, 0x0d, 0x0f, 0x14, 0x0e, 0x11, 0x16, 0x0f, 0x12, 0x17,
    0x11, 0x13, 0x19, 0x12, 0x15, 0x1b, 0x13, 0x16, 0x1c, 0x14, 0x17, 0x1e, 0x15, 0x19, 0x20, 0x17,
    0x25, 0x05, 0x05, 0x28, 0x05, 0x05, 0x2b, 0x06, 0x06, 0x2e, 0x06, 0x06, 0x17, 0x01, 0x01, 0x19,
    0x02, 0x02, 0x1a, 0x04, 0x04, 0x1c, 0x06, 0x06, 0x1e, 0x07, 0x07, 0x20, 0x09, 0x09, 0x22, 0x0b,
    0x0b, 0x24, 0x0c, 0x0c, 0x26, 0x0e, 0x0e, 0x28, 0x0f, 0x0f, 0x2a, 0x11, 0x11, 0x2c, 0x13, 0x13,
    0x23, 0x0f, 0x03, 0x27, 0x13, 0x04, 0x2a, 0x17, 0x06, 0x2e, 0x1b, 0x08, 0x31, 0x1f, 0x09, 0x35,
    0x23, 0x0b, 0x39, 0x27, 0x0c, 0x3c, 0x2b, 0x0e, 0x3d, 0x2e, 0x13, 0x3d, 0x31, 0x18, 0x3e, 0x34,
    0x1d, 0x3f, 0x37, 0x22, 0x3f, 0x39, 0x26, 0x3f, 0x3b, 0x2a, 0x3f, 0x3d, 0x2e, 0x3f, 0x3f, 0x32,
    0x05, 0x05, 0x03, 0x08, 0x07, 0x04, 0x0a, 0x09, 0x05, 0x0c, 0x0b, 0x06, 0x0e, 0x0c, 0x07, 0x10,
    0x0e, 0x08, 0x13, 0x10, 0x09, 0x15, 0x12, 0x0a, 0x17, 0x14, 0x0b, 0x19, 0x16, 0x0c, 0x1c, 0x18,
    0x0d, 0x1e, 0x1a, 0x0f, 0x20, 0x1b, 0x10, 0x22, 0x1d, 0x11, 0x24, 0x1f, 0x12, 0x27, 0x21, 0x13,
    0x06, 0x05, 0x02, 0x08, 0x06, 0x03, 0x0b, 0x08, 0x04, 0x0d, 0x09, 0x04, 0x0f, 0x0a, 0x05, 0x11,
    0x0c, 0x06, 0x14, 0x0d, 0x07, 0x16, 0x0e, 0x08, 0x18, 0x10, 0x09, 0x1b, 0x11, 0x0a, 0x1d, 0x13,
    0x0a, 0x1f, 0x14, 0x0b, 0x21, 0x15, 0x0c, 0x24, 0x17, 0x0d, 0x26, 0x18, 0x0e, 0x28, 0x19, 0x0f,
    0x02, 0x02, 0x05, 0x04, 0x04, 0x07, 0x06, 0x06, 0x0a, 0x08, 0x08, 0x0c, 0x0a, 0x0a, 0x0e, 0x0c,
    0x0c, 0x11, 0x0e, 0x0e, 0x13, 0x10, 0x10, 0x15, 0x12, 0x12, 0x17, 0x15, 0x15, 0x1a, 0x17, 0x17,
    0x1c, 0x19, 0x19, 0x1e, 0x1b, 0x1b, 0x20, 0x1d, 0x1d, 0x22, 0x20, 0x20, 0x25, 0x22, 0x22, 0x27,
    0x12, 0x14, 0x0d, 0x0e, 0x11, 0x08, 0x0a, 0x0d, 0x04, 0x15, 0x15, 0x0f, 0x17, 0x17, 0x11, 0x10,
    0x10, 0x0c, 0x0a, 0x13, 0x08, 0x11, 0x1b, 0x0f, 0x18, 0x24, 0x16, 0x1f, 0x2c, 0x1d, 0x26, 0x35,
    0x24, 0x2d, 0x3e, 0x2b, 0x18, 0x08, 0x02, 0x1f, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

